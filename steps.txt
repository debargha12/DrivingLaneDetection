1. Convert image to gray scale
cv2.cvtColor(imagename, cv2.color_BGR2GRAY)



2. reduce noise
using gaussian blur
in gray scale single number to determine the brightness of the image, 90 gray

modify the value of the pixel with average value of the pixels around it
averaging the pixels for smoothing is done with a kernal
kernal convulation
blur = cv2.GaussianBlur(gray,(5,5),0)

3. canny method: derivative(f(x,y))
image as x and y, x width, y height product is total  number of pixels
image can be a continuous function of x and y so we can perform math function
deri measures change in intensity wrt adjacent pixels
cv2.Canny(image, low_threshold, high_threshold)
traces outline that indicate rapid changes in brightness

4.Finding lane lines(region of interest)
plt.imshow(canny)
plt.show()
using this draw a triangle to find the region of interest
find the coords of the roi using the pyplot image
binary of pixels of black region is 0000 and white is 11111111
do bitwise and between canny image and triangle roi contour
hence we will get only the lane
#masked_image

5. hough transform to find lane lines
plot line as a point in hough space y=3x+2 becomes point (3,2) in hough space
a point is a line in hough space. evry point can have many lines passing through it hence there will be many points in hough space
line joining two points will be the point of intersection in hough space

take points plot lines in hough space find all interactions in hough space ie point of contacts. divide hough space into grids . perform votes in eaach grid then. the grid with max vote we take and the m and x value will give the best fit line for all the points
problem is the vertical line with slope infinity
 we need robust representation
 we use polar coordinates instead
 row = xcostheta +ysintheta
 for polar a point is a sinusoidal curve in hough space














-
